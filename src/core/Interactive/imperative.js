    /**
     * Generates an enumerable sequence by repeating a source sequence as long as the given loop condition holds.
     * @param condition Loop condition.
     * @param source Sequence to repeat while the condition evaluates true.
     * @return Sequence generated by repeating the given sequence while the condition evaluates to true.
     */    
    var enumerableWhileDo = Enumerable.whileDo = function (condition, source) {
        return enumerableRepeat(source).takeWhile(condition).SelectMany(identity);
    };

    /**
     * Returns an enumerable sequence based on the evaluation result of the given condition.
     * @param condition Condition to evaluate.
     * @param thenSource Sequence to return in case the condition evaluates true.
     * @param elseSource Sequence to return in case the condition evaluates false.
     * @return Either of the two input sequences based on the result of evaluating the condition.
     */
    Enumerable.ifThen = function (condition, thenSource, elseSource) {
        elseSource || (elseSource = enumerableEmpty());
        return enumerableDefer(function () { return condition() ? thenSource : elseSource; });
    };

    /**
     * Generates an enumerable sequence by repeating a source sequence as long as the given loop postcondition holds.
     * @param source Source sequence to repeat while the condition evaluates true.
     * @param condition Loop condition.
     * @return Sequence generated by repeating the given sequence until the condition evaluates to false.
     */
    Enumerable.doWhile = function (source, condition) {
        return source.concat(enumerableWhile(condition, source));
    };

    /**
     * Returns a sequence from a dictionary based on the result of evaluating a selector function, also specifying a default sequence.
     * @param selector Selector function used to pick a sequence from the given sources.
     * @param sources Dictionary mapping selector values onto resulting sequences.
     * @param defaultSource Default sequence to return in case there's no corresponding source for the computed selector value.
     * @return The source sequence corresponding with the evaluated selector value; otherwise, the default source.
     */
    Enumerable.cases = function (selector, sources, defaultSource) {
        defaultSource || (defaultSource = enumerableEmpty());
        return enumerableDefer(function () {
            var result = sources[selector()]
            if (!result) {
                result = defaultSource;
            }
            return result;
        });
    };